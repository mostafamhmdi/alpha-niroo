{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11158163,"sourceType":"datasetVersion","datasetId":6962154}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:53:52.550070Z","iopub.execute_input":"2025-03-25T10:53:52.550256Z","iopub.status.idle":"2025-03-25T10:53:52.612991Z","shell.execute_reply.started":"2025-03-25T10:53:52.550232Z","shell.execute_reply":"2025-03-25T10:53:52.612112Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/eurusd/EURUSD-30-DS.csv', header=None, names=['Date','Open', 'High', 'Low', 'Close','Volume'])\ndata.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:54:02.414168Z","iopub.execute_input":"2025-03-25T10:54:02.414562Z","iopub.status.idle":"2025-03-25T10:54:02.805475Z","shell.execute_reply.started":"2025-03-25T10:54:02.414531Z","shell.execute_reply":"2025-03-25T10:54:02.804388Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"input_features = ['Close', 'Volume']\nscalers_inputs = {col: MinMaxScaler() for col in input_features}\nscaled_inputs = np.array([scalers_inputs[col].fit_transform(data[col].values.reshape(-1, 1)) for col in input_features])\nscaled_inputs = np.transpose(scaled_inputs, (1, 0, 2))\n\n# 3. انتخاب تارگت (OHLC)\noutput_features = ['Open', 'High', 'Low', 'Close']\nscalers_outputs = {col: MinMaxScaler() for col in output_features}\nscaled_outputs = np.array([scalers_outputs[col].fit_transform(data[col].values.reshape(-1, 1)) for col in output_features])\nscaled_outputs = np.transpose(scaled_outputs, (1, 0, 2))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:54:05.400765Z","iopub.execute_input":"2025-03-25T10:54:05.401049Z","iopub.status.idle":"2025-03-25T10:54:05.426566Z","shell.execute_reply.started":"2025-03-25T10:54:05.401029Z","shell.execute_reply":"2025-03-25T10:54:05.425754Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def create_sequences(inputs, outputs, seq_length):\n    X, y = [], []\n    for i in range(len(inputs) - seq_length):\n        X.append(inputs[i:i + seq_length])\n        y.append(outputs[i + seq_length])  # 4 مقدار OHLC تایم‌فریم بعدی\n    return np.array(X), np.array(y)\n\nseq_length = 60\nX, y = create_sequences(scaled_inputs, scaled_outputs, seq_length)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:54:08.493670Z","iopub.execute_input":"2025-03-25T10:54:08.493967Z","iopub.status.idle":"2025-03-25T10:54:09.054916Z","shell.execute_reply.started":"2025-03-25T10:54:08.493946Z","shell.execute_reply":"2025-03-25T10:54:09.054229Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_size = int(len(X) * 0.8)\nval_size = int(len(X) * 0.1)\nX_train, X_val, X_test = X[:train_size], X[train_size:train_size + val_size], X[train_size + val_size:]\ny_train, y_val, y_test = y[:train_size], y[train_size:train_size + val_size], y[train_size + val_size:]\n\nprint(\"تعداد نمونه‌های Train:\", len(X_train))\nprint(\"تعداد نمونه‌های Validation:\", len(X_val))\nprint(\"تعداد نمونه‌های Test:\", len(X_test))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:54:12.088378Z","iopub.execute_input":"2025-03-25T10:54:12.088653Z","iopub.status.idle":"2025-03-25T10:54:12.148678Z","shell.execute_reply.started":"2025-03-25T10:54:12.088633Z","shell.execute_reply":"2025-03-25T10:54:12.147967Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from tensorflow.keras.optimizers import Adam\nmodel = Sequential()\nmodel.add(LSTM(100, return_sequences=True, input_shape=(60, len(input_features))))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(25, return_sequences=False))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(4))\nmodel.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error', metrics=['mae'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:56:44.602507Z","iopub.execute_input":"2025-03-25T10:56:44.602846Z","iopub.status.idle":"2025-03-25T10:56:44.691665Z","shell.execute_reply.started":"2025-03-25T10:56:44.602826Z","shell.execute_reply":"2025-03-25T10:56:44.691041Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"early_stop = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\nhistory = model.fit(X_train, y_train, epochs=50, batch_size=128, \n                    validation_data=(X_val, y_val), callbacks=[early_stop])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T10:56:51.725630Z","iopub.execute_input":"2025-03-25T10:56:51.725964Z","iopub.status.idle":"2025-03-25T11:01:46.819087Z","shell.execute_reply.started":"2025-03-25T10:56:51.725938Z","shell.execute_reply":"2025-03-25T11:01:46.818330Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nplt.figure(figsize=(12, 6))\nplt.subplot(1, 2, 1)\nplt.plot(history.history['loss'], label='Train Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Loss in training')\nplt.xlabel('Epoch')\nplt.ylabel('Loss (MSE)')\nplt.legend()\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history['mae'], label='Train MAE')\nplt.plot(history.history['val_mae'], label='Validation MAE')\nplt.title('MAE in training')\nplt.xlabel('Epoch')\nplt.ylabel('MAE')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T11:03:32.071275Z","iopub.execute_input":"2025-03-25T11:03:32.071591Z","iopub.status.idle":"2025-03-25T11:03:32.697700Z","shell.execute_reply.started":"2025-03-25T11:03:32.071571Z","shell.execute_reply":"2025-03-25T11:03:32.696801Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 9. پیش‌بینی\npredictions = model.predict(X_test)\n\n# 10. برگردوندن به مقیاس اصلی\npredictions_open = scalers_outputs['Open'].inverse_transform(predictions[:, 0].reshape(-1, 1))\npredictions_high = scalers_outputs['High'].inverse_transform(predictions[:, 1].reshape(-1, 1))\npredictions_low = scalers_outputs['Low'].inverse_transform(predictions[:, 2].reshape(-1, 1))\npredictions_close = scalers_outputs['Close'].inverse_transform(predictions[:, 3].reshape(-1, 1))\n\ny_test_open = scalers_outputs['Open'].inverse_transform(y_test[:, 0].reshape(-1, 1))\ny_test_high = scalers_outputs['High'].inverse_transform(y_test[:, 1].reshape(-1, 1))\ny_test_low = scalers_outputs['Low'].inverse_transform(y_test[:, 2].reshape(-1, 1))\ny_test_close = scalers_outputs['Close'].inverse_transform(y_test[:, 3].reshape(-1, 1))\n\n# 11. محاسبه معیارها برای هر مقدار\ndef calculate_metrics(y_true, y_pred, name):\n    mse = mean_squared_error(y_true, y_pred)\n    rmse = np.sqrt(mse)\n    mae = mean_absolute_error(y_true, y_pred)\n    r2 = r2_score(y_true, y_pred)\n    print(f\"\\nمعیارهای ارزیابی برای {name}:\")\n    print(f\"MSE: {mse}\")\n    print(f\"RMSE: {rmse}\")\n    print(f\"MAE: {mae}\")\n    print(f\"R² Score: {r2}\")\n\ncalculate_metrics(y_test_open, predictions_open, \"Open\")\ncalculate_metrics(y_test_high, predictions_high, \"High\")\ncalculate_metrics(y_test_low, predictions_low, \"Low\")\ncalculate_metrics(y_test_close, predictions_close, \"Close\")\n\n# 12. دقت جهت برای Close\ncorrect_directions = np.sum(np.sign(predictions_close[1:] - predictions_close[:-1]) == np.sign(y_test_close[1:] - y_test_close[:-1]))\ndirectional_accuracy = correct_directions / (len(predictions_close) - 1)\nprint(f\"\\nدقت جهت برای Close: {directional_accuracy * 100}%\")\n\n# 13. رسم پیش‌بینی‌ها\nplt.figure(figsize=(12, 6))\nplt.subplot(2, 2, 1)\nplt.plot(y_test_open, label='real', color='blue')\nplt.plot(predictions_open, label='predicted', color='red')\nplt.title('Open: actual vs predicted')\nplt.legend()\n\nplt.subplot(2, 2, 2)\nplt.plot(y_test_high, label='real', color='blue')\nplt.plot(predictions_high, label='predicted', color='red')\nplt.title('High: actual vs predicted')\nplt.legend()\n\nplt.subplot(2, 2, 3)\nplt.plot(y_test_low, label='real', color='blue')\nplt.plot(predictions_low, label='predicted', color='red')\nplt.title('Low: actual vs predicted')\nplt.legend()\n\nplt.subplot(2, 2, 4)\nplt.plot(y_test_close, label='real', color='blue')\nplt.plot(predictions_close, label='predicted', color='red')\nplt.title('Close: actual vs predicted')\nplt.legend()\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T11:03:54.554612Z","iopub.execute_input":"2025-03-25T11:03:54.554942Z","iopub.status.idle":"2025-03-25T11:03:58.716258Z","shell.execute_reply.started":"2025-03-25T11:03:54.554915Z","shell.execute_reply":"2025-03-25T11:03:58.715344Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"n_samples = 100  # تعداد نمونه‌هایی که می‌خوای نشون بدی\n\nplt.figure(figsize=(12, 8))\nplt.subplot(2, 2, 1)\nplt.plot(y_test_open[:n_samples], label='real', color='blue')\nplt.plot(predictions_open[:n_samples], label='predicted', color='red')\nplt.title('Open: actual vs predicted')\nplt.ylabel('Open')\nplt.legend()\n\nplt.subplot(2, 2, 2)\nplt.plot(y_test_high[:n_samples], label='real', color='blue')\nplt.plot(predictions_high[:n_samples], label='predicted', color='red')\nplt.title('High:actual vs predicted')\nplt.ylabel('High')\nplt.legend()\n\nplt.subplot(2, 2, 3)\nplt.plot(y_test_low[:n_samples], label='real', color='blue')\nplt.plot(predictions_low[:n_samples], label='predicted', color='red')\nplt.title('Low: actual vs predicted')\nplt.ylabel('Low')\nplt.legend()\n\nplt.subplot(2, 2, 4)\nplt.plot(y_test_close[:n_samples], label='real', color='blue')\nplt.plot(predictions_close[:n_samples], label='predicted', color='red')\nplt.title('Close: actual vs predicted')\nplt.ylabel('Close')\nplt.legend()\n\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-25T11:18:03.961690Z","iopub.execute_input":"2025-03-25T11:18:03.962040Z","iopub.status.idle":"2025-03-25T11:18:04.737770Z","shell.execute_reply.started":"2025-03-25T11:18:03.962017Z","shell.execute_reply":"2025-03-25T11:18:04.736709Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}